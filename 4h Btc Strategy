import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime

class BTC4HTradingBot:
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.symbol = "BTCUSDT"
        self.interval = "4h"
        self.leverage = 2
        self.session = requests.Session()
        self.headers = {
            "X-MBX-APIKEY": self.api_key
        }

    def fetch_latest_data(self):
        """獲取最新的 BTC/USDT K 線數據"""
        url = "https://fapi.binance.com/fapi/v1/klines"
        params = {
            "symbol": self.symbol,
            "interval": self.interval,
            "limit": 100
        }
        response = self.session.get(url, params=params, headers=self.headers)
        data = response.json()
        df = pd.DataFrame(data, columns=[
            "Timestamp", "Open", "High", "Low", "Close", "Volume", "CloseTime",
            "QuoteAssetVolume", "NumberOfTrades", "TakerBuyBase", "TakerBuyQuote", "Ignore"])
        df["Timestamp"] = pd.to_datetime(df["Timestamp"], unit="ms")
        df.set_index("Timestamp", inplace=True)
        df = df.astype(float)
        return df
    
    def calculate_indicators(self, df):
        """計算 EMA、ATR 和 RSI 指標"""
        df["EMA9"] = df["Close"].ewm(span=9).mean()
        df["EMA21"] = df["Close"].ewm(span=21).mean()
        df["ATR"] = (df["High"] - df["Low"]).rolling(14).mean()
        delta = df["Close"].diff()
        gain = np.where(delta > 0, delta, 0)
        loss = np.where(delta < 0, -delta, 0)
        avg_gain = pd.Series(gain).rolling(14).mean()
        avg_loss = pd.Series(loss).rolling(14).mean()
        rs = avg_gain / avg_loss
        df["RSI"] = 100 - (100 / (1 + rs))
        return df

    def determine_signal(self, df):
        """根據策略確定交易信號"""
        latest = df.iloc[-1]
        if latest["EMA9"] > latest["EMA21"] and 30 < latest["RSI"] < 70:
            return "BUY"
        elif latest["EMA9"] < latest["EMA21"] and latest["RSI"] > 70:
            return "SELL"
        return "HOLD"

    def place_order(self, side, quantity):
        """下單交易"""
        url = "https://fapi.binance.com/fapi/v1/order"
        params = {
            "symbol": self.symbol,
            "side": side,
            "type": "MARKET",
            "quantity": quantity,
            "timestamp": int(time.time() * 1000)
        }
        response = self.session.post(url, params=params, headers=self.headers)
        return response.json()

    def run(self):
        """運行交易機器人"""
        print("交易機器人啟動...")
        while True:
            try:
                df = self.fetch_latest_data()
                df = self.calculate_indicators(df)
                signal = self.determine_signal(df)
                
                if signal == "BUY":
                    print("發現買入信號，執行多單...")
                    self.place_order("BUY", 0.01)
                elif signal == "SELL":
                    print("發現賣出信號，執行空單...")
                    self.place_order("SELL", 0.01)
                else:
                    print("暫無交易信號...")
                
                time.sleep(60 * 60 * 4)  # 等待4小時
            except Exception as e:
                print(f"運行出錯: {e}")
                time.sleep(60)

# 設置 API Key 並啟動機器人
if __name__ == "__main__":
    API_KEY = "你的API_KEY"
    API_SECRET = "你的API_SECRET"
    bot = BTC4HTradingBot(API_KEY, API_SECRET)
    bot.run()
